/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Tubes;

import java.awt.Cursor;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.GraphicsEnvironment;
import java.awt.Image;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.Transparency;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.lang.Math; 
import javax.imageio.ImageIO;

/**
 *
 * @author user
 */
public class tesFish extends javax.swing.JPanel implements Runnable {
    
    
    
    /**
     * Creates new form tesFish
     */
    public tesFish() {
        initComponents();
        //player = new Ikan();
        ikiri = new IkanLiar[3];
        ikanan = new IkanLiar[3];
        for(int i=0; i<3; i++){
            ikiri[i] = new IkanLiar();
            ikiri[i].setKiri();
            ikanan[i] = new IkanLiar();
            ikanan[i].setKanan();
        }
      try {
            bg = ImageIO.read(getClass().getResource("bg_1.png"));
        } catch (IOException e) {
            e.printStackTrace();
        }        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setPreferredSize(new java.awt.Dimension(800, 600));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
        // TODO add your handling code here:
        p = MouseInfo.getPointerInfo().getLocation();
        if(!paused){player.setPosition(p);}
        
//        for(int i=0; i<3; i++){
//            ikiri[i].move();
//            ikanan[i].move();
//        }        
//        repaint();
    }//GEN-LAST:event_formMouseMoved

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
        if(!paused){
            thread.suspend();
            paused = true;
            repaint();
        }
        else {thread.resume(); paused = false;}
        //System.out.println(thread.getState());
    }//GEN-LAST:event_formMouseClicked

    @Override
    public void paintComponent(Graphics g) {
	super.paintComponent(g);
        g.fillRect(0, 0, getWidth(), getHeight());

	//perform drawing operations
        //g.fillRect(0, 0, getWidth(), getHeight());
        g.drawImage(bg, 0, 0, this);
        g.drawImage(player.img2, player.x, player.y, this);
        //g.drawString("hello world!", 200 ,10 );
        Font font = g.getFont().deriveFont( 20.0f );
        g.setFont( font );        
        g.drawString("Level: " + player.getLevel(), 100 ,25 );
        g.drawString("Score: " + player.getScore(), 200 ,25 );
        if(paused){g.drawString("PAUSED", 350, 300);}
        
        
        for(int i=0; i<3; i++){
            g.drawImage(ikiri[i].img2, ikiri[i].x, ikiri[i].y, this);
            g.drawImage(ikanan[i].img2, ikanan[i].x, ikanan[i].y, this);
        }    
        g.dispose();
        //paintChildren(g);
        
        
//        if(player.img == null){g.drawString("null image", 20 ,10 );}
//        BufferedImage cursorImg = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice()
//                .getDefaultConfiguration().createCompatibleImage(16, 16, Transparency.TRANSLUCENT);
//        Cursor blankCursor = Toolkit.getDefaultToolkit().createCustomCursor(cursorImg, new Point(0, 0), "blank cursor");
//        // Set the blank cursor to the JFrame.
//        setCursor(blankCursor);        
    }    
    
    public void run(){
        while(true){
            try {
                thread.sleep(30);
                for(int i=0; i<3; i++){
                    int px = player.x, py = player.y;
                    int px1 = ikiri[i].x, py1 = ikiri[i].y;
                    int px2 = ikanan[i].x, py2 = ikanan[i].y;
                    if(Math.abs(px - px1)<=30 && Math.abs(py - py1)<=30){
                        if(player.getLevel()-1<ikiri[i].getLevel()){angka=7; break;}
                        player.makan(ikiri[i].getLevel());
                        ikiri[i] = new IkanLiar();
                        ikiri[i].setKiri();
                        if(player.getLevel()==4) {angka++;}
                    }
                    else if(Math.abs(px - px2)<=30 && Math.abs(py - py2)<=30){
                        if(player.getLevel()-1<ikanan[i].getLevel()){angka=7; break;}
                        player.makan(ikanan[i].getLevel());
                        ikanan[i] = new IkanLiar();
                        ikanan[i].setKanan();   
                        if(player.getLevel()==4) {angka++;}
                    }
                }
                for(int i=0; i<3; i++){
                    ikiri[i].move();
                    if(ikiri[i].x>=800){
                        ikiri[i] = new IkanLiar();
                        ikiri[i].setKiri();
                    }
                    ikanan[i].move();
                    if(ikanan[i].x<=0){
                        ikanan[i] = new IkanLiar();
                        ikanan[i].setKanan();
                    }                    
                   }                 
                //angka += 50;
                gameScore = player.getScore();
                if(angka>=7){break;}
                
                repaint();
            } catch (InterruptedException ex) {
                Logger.getLogger(tesFish.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        //System.out.println("aaaaa");
        //System.out.println(gameScore);
        //setFocusable(false);
        //setVisible(false);
        
    }
    
    
    static Ikan player = new Ikan();
    int angka = 0;
    Thread thread = new Thread(this);
    Point p;
    IkanLiar ikiri[];// = new IkanLiar[3];//ikan muncul dari kiri
    IkanLiar ikanan[];// = new IkanLiar[3];//ikan muncul dari kanan
    boolean paused = false, play = true;
    Image bg;
    public int gameScore = 0;
    
    
    void newThread(){
        thread = new Thread(this);
        angka = 0;
        gameScore = 0;
        player = new Ikan();
        for(int i=0; i<3; i++){
            ikiri[i] = new IkanLiar();
            ikiri[i].setKiri();
            ikanan[i] = new IkanLiar();
            ikanan[i].setKanan();
        }        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
